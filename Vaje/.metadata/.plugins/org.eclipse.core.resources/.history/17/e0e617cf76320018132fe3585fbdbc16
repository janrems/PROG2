import java.util.HashMap;
import java.util.*;

public class Graf {
	Map<Object, Tocka> slovarTock;

	public Graf() {
		super();
		this.slovarTock = new HashMap<Object, Tocka>();
	}
	public Tocka tocka(Object ime){
		return slovarTock.get(ime);
	}
	
	public boolean povezava (Tocka tocka1, Tocka tocka2){
		return tocka1.sosedi.contains(tocka2);
	}
	
	public void dodajTocko(Tocka tocka){
		if (!slovarTock.containsKey(tocka.ime)){
			slovarTock.put(tocka.ime, tocka);
		}
	}
	
	public void dodajPovezavo(Tocka a, Tocka b){
		if ((a != b) && (!povezava(a, b))){
			a.sosedi.add(b);
			b.sosedi.add(a);
		}
	}
	
	public void odstraniPovezavo(Tocka a, Tocka b){
		if (povezava(a,b)){
			a.sosedi.remove(b);
			b.sosedi.remove(a);
		}
	}
	
	public static Graf prazen(int n){
		Graf g = new Graf();
		for (int i = 1; i <= n; i++){
			Tocka t = new Tocka(i);
			g.dodajTocko(t);
		}
		return g;
	}
	
	public static Graf cikel(int n){
		Graf g = prazen(n);
		for (int i = 1; i < n; i++){
			g.dodajPovezavo(g.tocka(i), g.tocka(i+1));
		}
		g.dodajPovezavo(g.tocka(n), g.tocka(1));
		return g;
	}
	
	public static Graf poln(int n){
		Graf g = prazen(n);
		for (int i = 1; i <= n; i ++){
			for (int j = 1; j <= n; j ++){
				g.dodajPovezavo(g.tocka(i),g.tocka(j));
			}
		}
		return g;
	}
	
	public void razporedi(double r, double x1, double y1){
		int st_tock = slovarTock.size();
		double perioda = st_tock/(2*Math.PI);
		int count = 0 ;
		for (Tocka t :slovarTock.values()){
			double kot = count*perioda; 
			t.x = x1 + (Math.cos(kot)*r);
			t.y = y1 + (Math.sin(kot)*r);
			count ++;	
		}
		
	}
	
	
	
	
	
	
	
	
}
